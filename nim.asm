.ORIG x3000

;initialize registers
AND R0, R0, #0
AND R1, R1, #0 ;row A
ADD R1, R1, #3
AND R2, R2, #0 ;row B
ADD R2, R2, #5
AND R3, R3, #0 ;row C
ADD R3, R3, #8
AND R4, R4, #0 ;row number
AND R5, R5, #0 ;amount of stones
AND R6, R6, #0
AND R7, R7, #0
STI R1, ROWA
STI R2, ROWB
STI R3, ROWC

;print rows
LOOP JSR PRINT

;player 1 choose
RETRY1 LEA R0, CHOOSE1
TRAP x22
TRAP x20
TRAP x21
ADD R4, R0, #0
TRAP x20
TRAP x21
ADD R5, R0, #0

;check for errors/update
LD R6, A
NOT R6, R6
ADD R6, R6, #1
ADD R6, R6, R4
BRz GOTOPRINT
LD R6, B
NOT R6, R6
ADD R6, R6, #1
ADD R6, R6, R4
BRz GOTOPRINT
LD R6, C
NOT R6, R6
ADD R6, R6, #1
ADD R6, R6, R4
ADD R6, R6, #0
BRz GOTOPRINT
GOTOERROR1 JSR PRINTERROR
BRnzp RETRY1
GOTOPRINT LD R7, ZERO
NOT R7, R7
ADD R7, R7, #1
ADD R7, R5, R7
BRnz GOTOERROR1
JSR CHECKNUM
ADD R6, R6, #0
BRz RETRY1

LD R0, BREAK
TRAP x21

;check for winner
JSR WINNER
ADD R6, R6, #0
BRz SKIP1
LD R0, BREAK
TRAP x21
LEA R0 P2WIN
TRAP x22
BRnzp ENDGAME

;print rows
SKIP1 LD R0, BREAK
TRAP x21
JSR PRINT

;player 2 choose
RETRY2 LEA R0, CHOOSE2
TRAP x22
TRAP x20
TRAP x21
ADD R4, R0, #0
TRAP x20
TRAP x21
ADD R5, R0, #0

;check for errors/update
LD R6, A
NOT R6, R6
ADD R6, R6, #1
ADD R6, R6, R4
BRz GOTOPRINT2
LD R6, B
NOT R6, R6
ADD R6, R6, #1
ADD R6, R6, R4
BRz GOTOPRINT2
LD R6, C
NOT R6, R6
ADD R6, R6, #1
ADD R6, R6, R4
ADD R6, R6, #0
BRz GOTOPRINT2
GOTOERROR2 JSR PRINTERROR
BRnzp RETRY2
GOTOPRINT2 LD R7, ZERO
NOT R7, R7
ADD R7, R7, #1
ADD R7, R5, R7
BRnz GOTOERROR2
JSR CHECKNUM
ADD R6, R6, #0
BRz RETRY2

LD R0, BREAK
TRAP x21

;check for winner
JSR WINNER
ADD R6, R6, #0
BRz SKIP2
LD R0, BREAK
TRAP x21
LEA R0 P1WIN
TRAP x22
BRnzp ENDGAME

SKIP2 LD R0, BREAK
TRAP x21
BRnzp LOOP

ENDGAME HALT

;labels
CHOOSE1	.STRINGZ "Player 1, choose a row and number of rocks: "
CHOOSE2	.STRINGZ "Player 2, choose a row and number of rocks: "
P1WIN	.STRINGZ "Player 1 Wins."
P2WIN	.STRINGZ "Player 2 Wins."
ERROR	.STRINGZ "Invalid move. Try again."
ROWA	.FILL x3500
ROWB	.FILL x3501
ROWC	.FILL x3502
A	.FILL x0041
B	.FILL x0042
ROWAT	.STRINGZ "ROW A: "
ROWBT	.STRINGZ "ROW B: "
ROWCT	.STRINGZ "ROW C: "
STONE	.FILL x006F
BREAK	.FILL x000A
C	.FILL x0043
ZERO	.FILL x0030
MINUS	.FILL #-48
SAVER1	.BLKW 1
SAVER2	.BLKW 1
SAVER3	.BLKW 1
SAVER4	.BLKW 1
SAVER5	.BLKW 1
SAVER6	.BLKW 1
SAVER7	.BLKW 1
SAVER0	.BLKW 1

PRINTERROR ST R7, SAVER7
ST R0, SAVER0
LD R0, BREAK
TRAP x21
LEA R0, ERROR
TRAP x22
LD R0, BREAK
TRAP x21
LD R7, SAVER7
LD R0, SAVER0
RET

;;;subroutine WINNER - choose winner;;;
WINNER ST R7, SAVER7
ST R0, SAVER0
AND R6, R6, #0
LDI R1, ROWA
BRnp NOWINNER
LDI R2, ROWB
BRnp NOWINNER
LDI R3, ROWC
BRnp NOWINNER
ADD R6, R6, #1
NOWINNER LD R7, SAVER7
LD R0, SAVER0
RET


;;;subroutine PRINT - print board;;;
PRINT ST R1, SAVER1
ST R2, SAVER2
ST R3, SAVER3
ST R4, SAVER4
ST R5, SAVER5
ST R7, SAVER7
ST R0, SAVER0
LDI R1, ROWA
LDI R2, ROWB
LDI R3, ROWC

;print row A
LEA R0, ROWAT
TRAP x22
TOPA ADD R1, R1, #0
BRnz GOTOB
LD R0, STONE
TRAP x21
ADD R1, R1, #-1
BRnzp TOPA

;print row B
GOTOB LD R0, BREAK
TRAP x21
LEA R0, ROWBT
TRAP x22
TOPB ADD R2, R2, #0
BRnz GOTOC
LD R0, STONE
TRAP x21
ADD R2, R2, #-1
BRnzp TOPB

;print row C
GOTOC LD R0, BREAK
TRAP x21
LEA R0, ROWCT
TRAP x22
TOPC ADD R3, R3, #0
BRnz ENDPRINT
LD R0, STONE
TRAP x21
ADD R3, R3, #-1
BRnzp TOPC

ENDPRINT LD R0, BREAK
TRAP x21
LD R1, SAVER1
LD R2, SAVER2
LD R3, SAVER3
LD R4, SAVER4
LD R5, SAVER5
LD R7, SAVER7
LD R0, SAVER0
RET

;;;subroutine CHECKNUM - check/update;;;
CHECKNUM ST R4, SAVER4
ST R5, SAVER5
ST R7, SAVER7
ST R0, SAVER0
AND R7, R7, #0
LD R7, MINUS
ADD R5, R5, R7

;check for A
LD R6, A
NOT R6, R6
ADD R6, R6, #1
ADD R6, R6, R4
BRnp JUMPTOB
NOT R1, R1
ADD R1, R1, #1
ADD R7, R1, R5
BRnz UPDATE1
LD R0, BREAK
TRAP x21
LEA R0, ERROR
TRAP x22
LD R0, BREAK
TRAP x21
AND R6, R6, #0
BRnzp GOBACK
UPDATE1 NOT R7, R7
ADD R7, R7, #1
STI R7, ROWA
ADD R6, R6, #1
BRnzp GOBACK

;check for B
JUMPTOB LD R6, B
NOT R6, R6
ADD R6, R6, #1
ADD R6, R6, R4
BRnp JUMPTOC
NOT R2, R2
ADD R2, R2, #1
ADD R7, R2, R5
BRnz UPDATE2
LD R0, BREAK
TRAP x21
LEA R0, ERROR
TRAP x22
LD R0, BREAK
TRAP x21
AND R6, R6, #0
BRnzp GOBACK
UPDATE2 NOT R7, R7
ADD R7, R7, #1
STI R7, ROWB
ADD R6, R6, #1
BRnzp GOBACK

;check for C
JUMPTOC LD R6, C
NOT R6, R6
ADD R6, R6, #1
ADD R6, R6, R4
BRnp GOBACK
NOT R3, R3
ADD R3, R3, #1
ADD R7, R3, R5
BRnz UPDATE3
LD R0, BREAK
TRAP x21
LEA R0, ERROR
TRAP x22
LD R0, BREAK
TRAP x21
AND R6, R6, #0
BRnzp GOBACK
UPDATE3 NOT R7, R7
ADD R7, R7, #1
STI R7, ROWC
ADD R6, R6, #1
BRnzp GOBACK

GOBACK LDI R1, ROWA
LDI R2, ROWB
LDI R3, ROWC
LD R4, SAVER4
LD R5, SAVER5
LD R7, SAVER7
LD R0, SAVER0
RET

.END
